variables:
  CHANNEL: stable
  RUST_BACKTRACE: full
  RUST_TEST_THREADS: 1
name: cargo
pool:
  vmImage:  $[ variables['HOST_IMAGE'] ]
strategy:
  matrix:
    i686-pc-windows-msvc:
      HOST_IMAGE: vs2017-win2016
      ARTIFACT: ctehxk2-x86.dll
    x86_64-pc-windows-msvc:
      HOST_IMAGE: vs2017-win2016
      ARTIFACT: ctehxk2-x64.dll
    x86_64-apple-darwin:
      HOST_IMAGE: macos-10.13
      ARTIFACT: libctehxk2.dylib
    x86_64-unknown-linux-gnu:
      HOST_IMAGE: ubuntu-16.04
      ARTIFACT: libctehxk2.so
steps:
  - powershell: Invoke-WebRequest -Uri https://win.rustup.rs/ -OutFile rustup-init.exe
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Install rustup [Windows]
  - script: |
      set TARGET=%SYSTEM_JOBDISPLAYNAME%
      rustup-init.exe -y --default-host %TARGET% --default-toolchain %CHANNEL%
      set PATH=%PATH%;%USERPROFILE%\.cargo\bin
      echo "##vso[task.setvariable variable=PATH;]%PATH%"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Install toolchain [Windows]
  - script: |
      export TARGET=$SYSTEM_JOBDISPLAYNAME
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-host $TARGET --default-toolchain $CHANNEL
      export PATH=$PATH:~/.cargo/bin
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: Install rustup and toolchain [Linux & OSX]
  - script: |
      rustc -V
      cargo -V
    displayName: Check rustc and cargo versions
  - script: |
      rustup component add rustfmt-preview
      rustup component add clippy-preview
      cargo install -f cargo-audit
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Install Clippy, Rustfmt and Audit
  - script: |
      cargo audit
      cargo fmt --all -- --check
      cargo clippy --all-targets -- -D warnings
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Run cargo audit, fmt and clippy
  - script: |
      cargo test --verbose --all -- --nocapture
    displayName: Run cargo test
  - script: |
      cargo build --release
    displayName: Run cargo build
  - task: CopyFiles@2
    inputs:
      contents: '$(System.DefaultWorkingDirectory)/target/release/$ARTIFACT'
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: GithubRelease@0
    inputs:
      gitHubConnection: eHealthExperts
      repositoryName: 'eHealthExperts/k2-basecamp'
      action: 'create'
      tagSource: 'auto'
      assetUploadMode: 'replace'
      isDraft: false
      isPreRelease: false
      addChangeLog: false
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Release to GitHub'
